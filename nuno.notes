-- todo
make serverUrl consistent with rackspace in joyent.
code setWait in joyent
change reboot test to use setWait
add sync time limit to setWait

--
// creates a server
require('http').ClientRequest = function (opts,cb) { console.log(this,opts,cb); console.log(opts.body.toString('ascii')); throw new Error("Bringing you down taking names"); };

helpers = require('./test/helpers')
client = helpers.createClient('joyent', 'compute')
client.createServer({ "image": "sdc:sdc:nodejs:1.3.3", "name": "nuno5", "flavor": "Small 1GB" }, function(a,b,c) { if(a) { console.log(a); } console.log(b,c) })

--

clean ur own mess
sdc-listmachines -u https://us-sw-1.api.joyentcloud.com/ -a nodejitsu1 | json -a  id | xargs sdc-deletemachine -u https://us-sw-1.api.joyentcloud.com/ -a nodejitsu1

--
// creates and deletes server
helpers = require('./test/helpers')
client = helpers.createClient('joyent', 'compute')
client.createServer(function(a,b) { console.log('+'); if(a) { return console.log(a); } console.log(b); client.destroyServer(b, function(a,b){ console.log('-'); if(a) { return console.log(a); } console.log(b); }) })

---

http-console --ssl --json us-sw-1.api.joyentcloud.com -f
/nodejitsu1
/machines
x-api-version: ~6.5
date: ...
Authorization: Signature keyId="/nodejitsu1/keys/id_rsa",algorithm="rsa-sha256",headers="date" ...
POST
{ "image": "sdc:sdc:nodejs:1.3.3", "name": "nuno3", "flavor": "Small 1GB" }

---

request = require('request');
sign    = require('./http-signature');
fs      = require('fs');
keys    = {key: fs.readFileSync('/Users/dscape/.ssh/id_rsa', 'ascii'), keyId: "/nodejitsu1/keys/id_rsa"}

var req = {method: 'POST', url: 'https://us-sw-1.api.joyentcloud.com/nodejitsu1/machines', headers: {"x-api-version": "~6.5", "Content-Type": "application/json", "Accept": "application/json"}, json: { "image": "sdc:sdc:nodejs:1.3.3", "name": "nuno2", "flavor": "Small 1GB" }};

sign.sign(req, keys);

console.log(req);
r = request(req, function (err,resp,body) { if(err) { return console.log(err,resp); } console.log(body); });

---

var request = require('request');

request({ method: 'GET', headers: { 'transfer-encoding': 'chunked', 'x-auth-token': '800cb06d-1fb0-4800-a259-ce4e68de88e3' }, url: 'https://servers.api.rackspacecloud.com/v1.0/537645/servers.json'}, function(err,body,r) { console.log(err,body,r.headers)} );

---
// init
pkgcloud  = require('./lib/pkgcloud')
rackspace = new pkgcloud.compute.createClient({"provider": "rackspace", "auth": { "username": "nodejitsutest", "apiKey": "0286cd520446fe6152b38c519c1a3197"} })

// reboot an active server
rackspace.createServer({"name": "test-reboot", "flavor": 1, "image": "112"},
  function(err,server,response) {
    if(err) { throw err; }
    var i = 1,
        j = 1;

      function waitForReboot(server) {
        return setTimeout(function (){
          server.refresh(function(err,srv){
            if(err) { return console.error(err); }
            console.log(j++, srv.name, srv.status);
            if(srv.status === "ACTIVE") {
              console.log('done');
              return;
            }
            waitForReboot(srv);
          });
        }, 10000);
      }

  function keepTrying() { 
    return setTimeout(function () {
      if(server.status==='ACTIVE') {
        console.log('done');
        server.reboot(function(err,ok) {
          if(err) { throw err; }
          waitForReboot(server);
        });
      } else {
        console.log(i++, server.status);
        server.refresh(function(err,srv){
          if(err) throw err;
          server=srv;
          keepTrying();
        });
      }
    }, 10000);
  }
  keepTrying();
});
--
j = 1;
function waitForReboot(server) {
  return setTimeout(function (){
    server.refresh(function(err,srv){
      if(err) { return console.error(err); }
      console.log(j++, srv.name, srv.status);
      if(srv.status === "ACTIVE") {
        console.log('done');
        return;
      }
      waitForReboot(srv);
    });
  }, 10000);
}

rackspace.getServers(function(_,servers) { 
  for (var i in servers){
   var server = servers[i];
   if(server.status==='ACTIVE') {
    server.reboot(function(err,ok) {
       if(err) { return console.error(err); }
       waitForReboot(server);
     });
   }
  } 
});

// list servers
rackspace.getServers(function(_,servers) { for (var i in servers){ console.log(servers[i].name, servers[i].id, servers[i].status); } })

// list images
rackspace.getImages(function(_,servers) { console.log(servers.length); for (var i in servers){ console.log(servers[i].name, servers[i].id); } })

// create a server, pool until its ready, reboot, wait for reboot to finish
rackspace.createServer({"name": "nunoisnuts", "flavor": 1, "image": "112"}, function(err,server,response) {
  if(err) { throw err; }
  var i = 1,
      j = 1;

  function waitForReboot(server) {
    console.log(j++, server.status);
    return setTimeout(function (){
      server.refresh(function(err,srv){
        if(err) throw err;
        waitForReboot(srv);
      });
    }, 10000);
  }

  function keepTrying() { 
    return setTimeout(function () {
      if(server.status==='ACTIVE') {
        console.log('done');
        server.reboot(function(err,ok) {
          if(err) { throw err; }
          waitForReboot(server);
        });
      } else {
        console.log(i++, server.status);
        server.refresh(function(err,srv){
          if(err) throw err;
          server=srv;
          keepTrying();
        });
      }
    }, 10000);
  }
  keepTrying();
});

// delete all servers
rackspace.getServers(function(_,servers) { for (var i in servers) { rackspace.destroyServer(servers[i].id); console.log(servers[i].id); } })

// delete all images that start with test
rackspace.getImages(function(_,images) { for (var i in images) { if(/^test/.test(images[i].name)) { rackspace.destroyImage(images[i].id); console.log(images[i].id); } } })